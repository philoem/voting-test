// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import './MerkleTreeProof.sol';

import "hardhat/console.sol";

contract Eligibility {

  MerkleTreeProof merkleTreeProofInstance;

  uint256 public constant MAX_ELIGIBLE_VOTERS = 10;

  address[] public eligibleVoters;
  mapping(address => bool) allowedAddresses;
  address public admin;

  constructor(address _merkleTreeProofInstance) {
    admin = msg.sender;

    merkleTreeProofInstance = MerkleTreeProof(_merkleTreeProofInstance);
    
    eligibleVoters.push(admin);
    allowedAddresses[admin] = true; 

    eligibleVoters.push(address(0x70997970C51812dc3A010C7d01b50e0d17dc79C8));
    allowedAddresses[address(0x70997970C51812dc3A010C7d01b50e0d17dc79C8)] = true;

    eligibleVoters.push(address(0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC));
    allowedAddresses[address(0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC)] = true;
  }

  function getVoters() view public returns(address[] memory) {
    require(eligibleVoters.length < MAX_ELIGIBLE_VOTERS, "Maximum eligible voters reached");

    for(uint256 i = 0; i < eligibleVoters.length; i++) {
      require(allowedAddresses[eligibleVoters[i]], "Address is not allowed to vote");
      if(msg.sender == eligibleVoters[i]) {
        console.log("Address already in eligible voters list");
      }
    }
    return eligibleVoters;
  }

}